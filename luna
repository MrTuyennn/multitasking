#!/bin/bash
#### ALL FUNCTIONS
# validatedModule = 0
# $0- Tên của file  Bash script.
# $1 - $9 - lần lượt là các đối số truyền vào cho file Bash script.
# $# - Số lượng các  arguments chúng ta truyền vào cho file the Bash script.
# $@ - Tất cả các đối số cung cấp cho file  Bash script.
# $? - Trạng thái của câu lệnh thực hiện gần nhất ( 0 -> true , 1 -> false ) 
# $$ - ID của script hiện tại .

runScript(){    
    # cd $appDir"/xoon_cube_core/app_data" && echoInfo "Execute commands in Data" && executeCommands
    # cd $appDir"/xoon_cube_core/app_resources" && echoInfo "Execute commands in Resources" && executeCommands  
    # cd $appDir"/xoon_cube_core/app_plugin" && echoInfo "Execute commands in Plugins" && executeCommands    
    # cd $appDir"/xoon_cube_core/app_presentation" && echoInfo "Execute commands in Presentation" && executeCommands
    # cd $appDir"/xoon_cube_core" && echoInfo  "Execute commands in LUNA CORE" && executeCommands
    echoInfo "Execute commands in App" && executeCommands
}

executeCommands(){
  for command in "${commands[@]}"; do
    if [ $command == "gen" ]; then
      executeGenerate   
    fi
    if [ $command == "get" ]; then
      executeGetPackages
    fi
      if [ $command == "clean" ]; then
      executeCleanPackages
    fi
      if [ $command == "locale" ]; then
      executeGenerateGetLocale
    fi
    if [ $command == "cleanIOS" ]; then
      executeCleanOpenXCode
    fi
  
  done
}

executeCleanOpenXCode() {
   echoCommandInfo "AUTO CLEAN OPEN XCODE"
   flutter clean && flutter pub get && cd ./ios && rm -rf ./Pods && rm Podfile.lock && pod install && open Runner.xcworkspace && cd ..
}

executeGenerateGetLocale() {
    echoCommandInfo "executeGenerateGetLocale"
    flutter gen-l10n
}

executeCleanPackages() {
    echoCommandInfo "executeCleanPackages"
    flutter clean && flutter pub get
}

executeGetPackages() {
    echoCommandInfo "executeGetPackages"
    flutter clean && flutter pub get
}

executeGenerate() {
    echoCommandInfo "executeGenerate"
    dart run build_runner build
}

echoInfo(){
  c_echo "GREEN"  "=====>  $1"
}

echoCommandInfo(){
  c_echo "YELLOW"  "==========>  $1"
}

echoError(){
  c_echo "RED"  "=====> ERROR:  $1  <====="
}

c_echo(){
    bold=$(tput bold)
    RED="\033[0;31m"
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m' # No Color
    printf "${!1}${bold}${2} ${NC}\n"
}

commands=( "$@" )
commandsLength=${#commands[@]}
if [ $commandsLength -eq 0 ]; then
  echoError "You need to enter one or more command names, name should be: format/generate"
  exit 1
fi

runScript